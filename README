================================================================================
                                  whenever-cpp
================================================================================

whenever-cpp is a utility to convert a program written in the Whenever language
(http://www.dangermouse.net/esoteric/whenever.html) into C++, and eventually
compile it with a standard C++ compiler.


DEPENDENCIES:
 - flex
 - bison
 - g++ (also works with clang++)


COMPILING:
  To compile the preprocessor:

    make

  To process a whenever file:

    ./whenever-cpp <whenever file>

  To compile an executable of the processed file:

    g++ -std=c++14 -Iruntime funcs.cc runtime/runtime.cc -o <executable name>


CONCEPTS:
whenever-cpp is divided in two parts: the preprocessor and the runtime.

Preprocessor:
  The preprocessor is the `whenever-cpp` executable, compiled with `make` and
  with sources located in src/. It parses the file given in input and turns it
  into C++ functions.

Runtime:
  The runtime is the code managing and executing the functions generated by the
  preprocessor. It is located in runtime/, and is compiled with the command
  issued by the preprocessor along with the file it generated.


CONTENTS:
src/:
  Contains the files needed to build `whenever-cpp`, the preprocessor.

runtime/:
  Contains the files to build against the output of the preprocessor to get an
  executable.

tests/:
  Contains several Whenever test files, some of which are taken from the
  examples given in the language documentation:

  tests/hello.wnvr:
    Prints "Hello world!" twice using wrong line numbering, showing that
    whenever-cpp is actually resistant to it.

  tests/beer.wnvr:
    Prints a simplified version of the song "99 Bottles of Beer".

  tests/fibo.wnvr:
    Computes and prints the first 100 Fibonacci numbers, enventually (NOTE:
    I never actually tested this to the end. It takes exponentially more time
    and space between prints.)


SUPPORT:
  The forget operator is supported, even though it is deprecated. It will simply
  output a warning.

  The U() and read() operations are not yet implemented.

  C instructions (not described by the Whenever documentation) are not yet
  supported.


BUGS:
  The parser is a really simple one. If you see some differences between the
  language specification and the preprocessor's behavior, please let me know,
  along with an example.


IMPLEMENTATION:
  - Since the preprocessor outputs C++, instructions will be compiled with a C++
    compiler, not a C one. This may lead to a different behavior than expected.
